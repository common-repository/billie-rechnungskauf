<?php

namespace Billie\Billie;

use Automattic\WooCommerce\Blocks\Payments\Integrations\AbstractPaymentMethodType;
use Billie\Plugin;

class BillieBlocksSupport extends AbstractPaymentMethodType {
	protected $name = 'billie';

	protected $gateway = null;

	public function initialize(): void {
		$this->gateway = Plugin::get_gateway();
	}

	/**
	 * In this function you should register your payment method scripts (using wp_register_script) and then return the
	 * script handles you registered with. This will be used to add your payment method as a dependency of the checkout
	 * script and thus take sure of loading it correctly.
	 *
	 * @return string[]
	 */
	public function get_payment_method_script_handles(): array {
		$asset_path   = BILLIE_PLUGIN_URL . '/ressources/build/index.asset.php';
		$version      = BILLIE_PLUGIN_VERSION;
		$dependencies = [];
		if ( file_exists( $asset_path ) ) {
			$asset        = require $asset_path;
			$version      = is_array( $asset ) && isset( $asset['version'] )
				? $asset['version']
				: $version;
			$dependencies = is_array( $asset ) && isset( $asset['dependencies'] )
				? $asset['dependencies']
				: $dependencies;
		}

		wp_register_script(
			'wc-billie-blocks-integration',
			BILLIE_PLUGIN_URL . '/ressources/build/blocks.js',
			$dependencies,
			$version,
			true
		);

		wp_set_script_translations( 'wc-billie-blocks-integration', 'billie-rechnungskauf' );

		return [ 'wc-billie-blocks-integration' ];
	}

	/**
	 * Include this if your payment method has a script you only want to load in the editor context for the checkout
	 * block. Include here any script from get_payment_method_script_handles that is also needed in the admin.
	 *
	 * @return string[]
	 */
	public function get_payment_method_script_handles_for_admin(): array {
		return parent::get_payment_method_script_handles_for_admin(); // TODO: Change the autogenerated stub
	}

	/**
	 * You can return from this function an associative array of data you want to be exposed for your payment method
	 * client side. This data will be available client side via wc.wcSettings.getSetting. So for instance if you
	 * assigned stripe as the value of the name property for this class, client side you can access any data
	 * via: wc.wcSettings.getSetting( 'stripe_data' ). That would return an object matching the shape of the
	 * associative array you returned from this function.
	 *
	 * @return array
	 */
	public function get_payment_method_data(): array {
		$data = parent::get_payment_method_data();

		if ( $this->gateway ) {
			$showLogo                   = (
				! isset( $this->gateway->settings['hide_logo'] ) || $this->gateway->settings['hide_logo'] === 'no'
			);
			$data['hide_logo']          = ! $showLogo;
			$data['title']              = __( 'Pay After Delivery', 'billie-rechnungskauf' );
			$data['method_description'] = __( 'Billie Description', 'billie-rechnungskauf' );

			if ( isset( $this->gateway->settings['description'], $this->gateway->settings['payment_term'] ) ) {
				$data['method_description'] = str_replace( '{Zahlungsziel}', $this->gateway->settings['payment_term'], $this->gateway->settings['description'] );
			}

			if ( isset( $this->settings['title'] ) ) {
				$data['title'] = $this->gateway->settings['title'];
			}
		}

		return $data;
	}
}
